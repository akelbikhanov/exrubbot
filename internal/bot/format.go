package bot

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/akelbikhanov/exrubbot/internal/text"
	"github.com/akelbikhanov/exrubbot/pkg/entity"
)

// formatQuote —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
// –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "\nüîº %s (%s)\nüîΩ %s (%s)"
func formatQuote(q entity.Quote) string {
	var result strings.Builder

	result.WriteString("\n")
	result.WriteString(text.SymbolAskPrice)
	result.WriteString(" ")
	result.WriteString(formatNumber(q.AskPrice, 2))
	result.WriteString(" (")
	result.WriteString(formatNumber(q.AskVolume, 0))
	result.WriteString(")\n")
	result.WriteString(text.SymbolBidPrice)
	result.WriteString(" ")
	result.WriteString(formatNumber(q.BidPrice, 2))
	result.WriteString(" (")
	result.WriteString(formatNumber(q.BidVolume, 0))
	result.WriteString(")")

	return result.String()
}

// formatNumber —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.
// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å.
// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–∏—Å.
func formatNumber(price string, precision int) string {
	price = strings.TrimSpace(price)
	if price == "" {
		return "-"
	}

	if f, err := strconv.ParseFloat(price, 64); err == nil {
		return fmt.Sprintf("%.*f", precision, f)
	}
	return price
}

// formatInterval —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏.
func formatInterval(seconds int) string {
	if seconds == 0 {
		return text.SuffixZero
	}

	var result strings.Builder

	if days := seconds / 86400; days > 0 {
		result.WriteString(strconv.Itoa(days))
		result.WriteString(text.SuffixDays)
		seconds %= 86400
	}
	if hours := seconds / 3600; hours > 0 {
		result.WriteString(strconv.Itoa(hours))
		result.WriteString(text.SuffixHours)
		seconds %= 3600
	}
	if minutes := seconds / 60; minutes > 0 {
		result.WriteString(strconv.Itoa(minutes))
		result.WriteString(text.SuffixMinutes)
		seconds %= 60
	}
	if seconds > 0 {
		result.WriteString(strconv.Itoa(seconds))
		result.WriteString(text.SuffixSeconds)
	}

	return result.String()
}

// formatTimeMSK —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ.
func formatTimeMSK() string {
	msk := time.FixedZone(text.QuoteTimeZone, 3*60*60)
	now := time.Now().In(msk)
	return now.Format(text.QuoteTimeFormat)
}
